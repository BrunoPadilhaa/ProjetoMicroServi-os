# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.enum_sensor_type import EnumSensorType  # noqa: F401,E501
import re  # noqa: F401,E501
from swagger_server import util


class GetTelemetryDataResponse(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, data_id: str=None, vehicle_id: str=None, data_hora: str=None, latitude: float=None, longitude: float=None, altimeter: float=None, telemetry_value: float=None, tipo_sensor: EnumSensorType=None):  # noqa: E501
        """GetTelemetryDataResponse - a model defined in Swagger

        :param data_id: The data_id of this GetTelemetryDataResponse.  # noqa: E501
        :type data_id: str
        :param vehicle_id: The vehicle_id of this GetTelemetryDataResponse.  # noqa: E501
        :type vehicle_id: str
        :param data_hora: The data_hora of this GetTelemetryDataResponse.  # noqa: E501
        :type data_hora: str
        :param latitude: The latitude of this GetTelemetryDataResponse.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this GetTelemetryDataResponse.  # noqa: E501
        :type longitude: float
        :param altimeter: The altimeter of this GetTelemetryDataResponse.  # noqa: E501
        :type altimeter: float
        :param telemetry_value: The telemetry_value of this GetTelemetryDataResponse.  # noqa: E501
        :type telemetry_value: float
        :param tipo_sensor: The tipo_sensor of this GetTelemetryDataResponse.  # noqa: E501
        :type tipo_sensor: EnumSensorType
        """
        self.swagger_types = {
            'data_id': str,
            'vehicle_id': str,
            'data_hora': str,
            'latitude': float,
            'longitude': float,
            'altimeter': float,
            'telemetry_value': float,
            'tipo_sensor': EnumSensorType
        }

        self.attribute_map = {
            'data_id': 'dataId',
            'vehicle_id': 'vehicle_id',
            'data_hora': 'data_hora',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'altimeter': 'altimeter',
            'telemetry_value': 'telemetry_value',
            'tipo_sensor': 'tipo_sensor'
        }
        self._data_id = data_id
        self._vehicle_id = vehicle_id
        self._data_hora = data_hora
        self._latitude = latitude
        self._longitude = longitude
        self._altimeter = altimeter
        self._telemetry_value = telemetry_value
        self._tipo_sensor = tipo_sensor

    @classmethod
    def from_dict(cls, dikt) -> 'GetTelemetryDataResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetTelemetryDataResponse of this GetTelemetryDataResponse.  # noqa: E501
        :rtype: GetTelemetryDataResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_id(self) -> str:
        """Gets the data_id of this GetTelemetryDataResponse.


        :return: The data_id of this GetTelemetryDataResponse.
        :rtype: str
        """
        return self._data_id

    @data_id.setter
    def data_id(self, data_id: str):
        """Sets the data_id of this GetTelemetryDataResponse.


        :param data_id: The data_id of this GetTelemetryDataResponse.
        :type data_id: str
        """

        self._data_id = data_id

    @property
    def vehicle_id(self) -> str:
        """Gets the vehicle_id of this GetTelemetryDataResponse.


        :return: The vehicle_id of this GetTelemetryDataResponse.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id: str):
        """Sets the vehicle_id of this GetTelemetryDataResponse.


        :param vehicle_id: The vehicle_id of this GetTelemetryDataResponse.
        :type vehicle_id: str
        """

        self._vehicle_id = vehicle_id

    @property
    def data_hora(self) -> str:
        """Gets the data_hora of this GetTelemetryDataResponse.

        Date time for telemetry data  # noqa: E501

        :return: The data_hora of this GetTelemetryDataResponse.
        :rtype: str
        """
        return self._data_hora

    @data_hora.setter
    def data_hora(self, data_hora: str):
        """Sets the data_hora of this GetTelemetryDataResponse.

        Date time for telemetry data  # noqa: E501

        :param data_hora: The data_hora of this GetTelemetryDataResponse.
        :type data_hora: str
        """

        self._data_hora = data_hora

    @property
    def latitude(self) -> float:
        """Gets the latitude of this GetTelemetryDataResponse.

        Latitude for geolocation from geo data  # noqa: E501

        :return: The latitude of this GetTelemetryDataResponse.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this GetTelemetryDataResponse.

        Latitude for geolocation from geo data  # noqa: E501

        :param latitude: The latitude of this GetTelemetryDataResponse.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this GetTelemetryDataResponse.

        Longitude for geolocation from geo data  # noqa: E501

        :return: The longitude of this GetTelemetryDataResponse.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this GetTelemetryDataResponse.

        Longitude for geolocation from geo data  # noqa: E501

        :param longitude: The longitude of this GetTelemetryDataResponse.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def altimeter(self) -> float:
        """Gets the altimeter of this GetTelemetryDataResponse.

        Altitude for geolocation from geo data  # noqa: E501

        :return: The altimeter of this GetTelemetryDataResponse.
        :rtype: float
        """
        return self._altimeter

    @altimeter.setter
    def altimeter(self, altimeter: float):
        """Sets the altimeter of this GetTelemetryDataResponse.

        Altitude for geolocation from geo data  # noqa: E501

        :param altimeter: The altimeter of this GetTelemetryDataResponse.
        :type altimeter: float
        """

        self._altimeter = altimeter

    @property
    def telemetry_value(self) -> float:
        """Gets the telemetry_value of this GetTelemetryDataResponse.

        Value for velocity from telemetry data  # noqa: E501

        :return: The telemetry_value of this GetTelemetryDataResponse.
        :rtype: float
        """
        return self._telemetry_value

    @telemetry_value.setter
    def telemetry_value(self, telemetry_value: float):
        """Sets the telemetry_value of this GetTelemetryDataResponse.

        Value for velocity from telemetry data  # noqa: E501

        :param telemetry_value: The telemetry_value of this GetTelemetryDataResponse.
        :type telemetry_value: float
        """

        self._telemetry_value = telemetry_value

    @property
    def tipo_sensor(self) -> EnumSensorType:
        """Gets the tipo_sensor of this GetTelemetryDataResponse.


        :return: The tipo_sensor of this GetTelemetryDataResponse.
        :rtype: EnumSensorType
        """
        return self._tipo_sensor

    @tipo_sensor.setter
    def tipo_sensor(self, tipo_sensor: EnumSensorType):
        """Sets the tipo_sensor of this GetTelemetryDataResponse.


        :param tipo_sensor: The tipo_sensor of this GetTelemetryDataResponse.
        :type tipo_sensor: EnumSensorType
        """

        self._tipo_sensor = tipo_sensor
